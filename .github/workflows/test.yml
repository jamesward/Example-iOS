name: "build-test"
on:
  push

jobs:
  build: # make sure build/ci work properly
    runs-on: macOS-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2

    - name: "Setup Signing"
      # These are env vars so they get referenced instead of included
      env:
        DEV_CERTIFICATES_FILE_BASE64: ${{ secrets.DEV_CERTIFICATES_FILE_BASE64 }}
        DEV_PROVISIONING_PROFILE_BASE64: ${{ secrets.DEV_PROVISIONING_PROFILE_BASE64 }}
        DIST_CERTIFICATES_FILE_BASE64: ${{ secrets.DIST_CERTIFICATES_FILE_BASE64 }}
        DIST_PROVISIONING_PROFILE_BASE64: ${{ secrets.DIST_PROVISIONING_PROFILE_BASE64 }}
      run: |
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        
        DEV_CERTIFICATE_PATH=$RUNNER_TEMP/development.p12
        DEV_PROFILE=$RUNNER_TEMP/development.mobileprovision
        
        DIST_CERTIFICATE_PATH=$RUNNER_TEMP/distribution.p12
        DIST_PROFILE=$RUNNER_TEMP/distribution.mobileprovision
        
        
        # import certificate and provisioning profile from secrets
        echo -n "${DEV_CERTIFICATES_FILE_BASE64}" | base64 --decode -o $DEV_CERTIFICATE_PATH
        echo -n "${DEV_PROVISIONING_PROFILE_BASE64}" | base64 --decode -o $DEV_PROFILE
        
        echo -n "${DIST_CERTIFICATES_FILE_BASE64}" | base64 --decode -o $DIST_CERTIFICATE_PATH
        echo -n "${DIST_PROVISIONING_PROFILE_BASE64}" | base64 --decode -o $DIST_PROFILE
        
        
        # create temporary keychain
        security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
        
        
        # import certificates to keychain
        security import $DEV_CERTIFICATE_PATH -P "${{ secrets.DEV_CERTIFICATES_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security import $DIST_CERTIFICATE_PATH -P "${{ secrets.DIST_CERTIFICATES_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        
        
        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $DEV_PROFILE ~/Library/MobileDevice/Provisioning\ Profiles
        cp $DIST_PROFILE ~/Library/MobileDevice/Provisioning\ Profiles

    - name: "Generate ExportOptions.plist"
      run: |
        mkdir Support
        
        cat <<EOF > Support/ExportOptions.plist
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
          <dict>
            <key>destination</key>
            <string>export</string>
            <key>method</key>
            <string>app-store</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>generateAppStoreInformation</key>
            <true/>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>teamID</key>
            <string>${{ secrets.APPSTORE_TEAM_ID }}</string>
            <key>uploadSymbols</key>
            <true/>
            <key>provisioningProfiles</key>
            <dict>
              <key>${{ secrets.BUNDLE_ID }}</key>
              <string>${{ secrets.DIST_PROVISIONING_PROFILE_NAME }}</string>
            </dict>
          </dict>
        </plist>
        EOF

    - run: ./Build
      env:
        DEVELOPMENT_TEAM: ${{ secrets.APPSTORE_TEAM_ID }}
        BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.DEV_PROVISIONING_PROFILE_NAME }}

    - uses: Apple-Actions/upload-testflight-build@v1
      with:
        app-path: .build/Artifacts/Example-iOS.ipa/Example-iOS.ipa
        issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
        api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
        api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
